#!/usr/bin/env ruby
# encoding: utf-8

# Pass the command to ChatGPT and return the response
#
# Usage: ai-chat prompt-msg
# Usage: ai-chat prompt-file.txt
# Usage: ai-chat prompt-file.txt -i -gpt4
#
# Requires OpenAI API Key stored in DOT_OPENAI_KEY

require_relative "../scripts/utils-ai"

OPENAI_KEY = ENV["DOT_OPENAI_KEY"] || ""
if OPENAI_KEY.empty?
  STDOUT << "Remember to set env DOT_OPENAI_KEY\n"
  exit 9
end

opt_file_mode = true # default assume prompt file path
opt_insert_mode = ARGV.delete('-i')
opt_git_commit = ARGV.delete('-git')
opt_model_gpt4 = ARGV.delete('-gpt4')

if ARGV.length == 0
  STDOUT << "Invalid arguments received\n"
  exit 1
end

msgs = [] # prompt messages

# check direct prompt or a prompt file end with .xxx extension
args = ARGV.join(' ')
if args.match?(/\.[a-zA-Z0-9]+$/)
  check_path(args)
  msgs = open_file(args)
else
  opt_file_mode = false
  msgs << { :role => ROLE_USER, :content => args }
end

if msgs.empty? || msgs.last[:role] == ROLE_ASSISTANT
  STDOUT << "No USER prompt message at the end: #{args}\n"
  exit 1
end

STDOUT << "Run prompt #{Time.now}\n"
opts = {}
opts["model"] = "gpt-4o" if opt_model_gpt4
resp = chat_resp(msgs, opts)
msgs << { :role => ROLE_ASSISTANT, :content => resp }

if !opt_file_mode # output in terminal
  STDOUT << msgs.last[:content] << "\n"
  exit
end

if opt_insert_mode # write only the resp
  write_file(args, [msgs.last])
else
  append_file(args, [msgs.last, { :role => ROLE_USER, :content => "" }])
end

if opt_git_commit # make a timestamp commit
  require_relative "../scripts/utils-git"
  commit_git(File.dirname(args), "Auto commit #{Time.now}")
end
