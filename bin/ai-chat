#!/usr/bin/env ruby
# encoding: utf-8

# Pass the command to ChatGPT and return the response
#
# Usage: ai-chatgpt "prompt msg" [context-file.txt]
# Usage: ai-chatgpt " " chat-file.txt -a
#
# Requires OpenAI API Key stored in DOT_OPENAI_KEY

require "net/http"
require "json"

OPENAI_KEY = ENV["DOT_OPENAI_KEY"] || ""
if OPENAI_KEY.empty?
  STDOUT << "Remember to set env DOT_OPENAI_KEY\n"
  exit 9
end

CHAT_SEPARATOR = "###### " # Heading 6

# get the direct prompt message from cmd
prompt = (ARGV[0] || "").strip
# get the context or chat file path
context_filepath = (ARGV[1] || "").strip
# detect whether to use append/chat mode, -a
# in append mode, reads context file is treated as chat file, and responses is written back
append_mode = (ARGV[2] || "") == "-a"

messages = []

# in append mode, read file and use --- as separator
if append_mode
  if context_filepath.empty?
    STDOUT << "No chat file path\n"
    exit 1
  elsif !File.exist?(context_filepath)
    File.new(context_filepath, "w")
  end

  role = "user" # user, assistant
  File.open(context_filepath, "r") do |file|
    content = []

    file.each_line do |line|
      if line.start_with?(CHAT_SEPARATOR)
        messages << { "role": role, "content": content.join("\n") }

        content = [] # reset
        role = (role == "user" ? "assistant" : "user")
      else
        content << line unless line.empty?
      end
    end

    messages << { "role": role, "content": content.join("\n").strip } unless content.empty?
  end

  if messages.empty? || role != "user" # must have a message and end with a user message
    if prompt.empty?
      STDOUT << "No prompt message\n"
      exit 1
    end

    messages << { "role": "user", "content": prompt } # fallback to use cmd prompt
  end

  STDOUT << "Chat: #{context_filepath}. Messages: #{messages.length}\n"
else
  if prompt.empty?
    STDOUT << "No prompt message\n"
    exit 1
  end

  STDOUT << "Prompt: #{prompt}. Context: #{context_filepath}\n"

  context_file = File.read(context_filepath) unless context_filepath.empty?
  # add context after prompt
  prompt += "\n" + context_file unless context_file.nil? || context_file.empty?

  messages << { "role": "user", "content": prompt }
end

url = URI("https://api.openai.com/v1/chat/completions")
headers = {
  "Content-Type" => "application/json",
  "Authorization" => "Bearer #{OPENAI_KEY}"
}

data = {
  "model" => "gpt-3.5-turbo",
  "messages" => messages
}

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true

request = Net::HTTP::Post.new(url, headers)
request.body = data.to_json

response = http.request(request)

if response.code == "200"
  result = JSON.parse(response.body)
  resp_content = result["choices"][0]["message"]["content"]

  if append_mode
    File.open(context_filepath, "a") do |file|
      file.puts("\n#{prompt}\n")
      file.puts("\n#{CHAT_SEPARATOR} assistant\n")
      file.puts("\n#{resp_content}\n")
      file.puts("\n#{CHAT_SEPARATOR} user\n")
    end
  end

  STDOUT << resp_content << "\n"
else
  STDOUT << "Error: #{response.code} - #{response.message}\n"
  exit 2
end