#!/usr/bin/env ruby
# encoding: utf-8

# Try to rename by read the PDF content
#
#   rename-pdf.rb file.pdf
#
#   find ~/Downloads | ag "\d+.pdf" | head -n 2 | YES=1 xargs -n 1 rename-pdf
#
# Dependency: gem install pdf-reader
#
require 'pdf-reader'
require 'colorize'
require 'readline'
require 'set'

def conj?(l1, l2)
  l1 = l1.downcase
  l2 = l2.downcase

  ['and', 'for', 'the', 'to', 'on', 'of', '&', /\w+,$/, /\w+:$/, /\w+'s$/].any? do |w|
    if w.is_a?(Regexp)
      w.match(l1) || w.match(l2)
    else
      l1.end_with?(' ' + w) || l2.start_with?(w + ' ')
    end
  end
end

def slug(str)
  str.downcase
     .gsub(/[^\w\p{Han}]/, '-')
     .gsub(/^a-|-a-|-s-|-+/, '-') # remove a, xx's
     .gsub(/-(t)-/, '\1-') # replace xx't to xxt
     .gsub(/^-|-$/, '')
end

def agree_or_alternative(candidate, lines)
  return candidate if ENV['YES'].to_s == '1'

  # Push lines to history, and add words to completion
  completion_words = lines.flat_map do |line|
    Readline::HISTORY << line
    line.downcase.split(' ')
  end

  completion_words = Set.new(completion_words).to_a

  Readline.completion_proc = proc do |str|
    completion_words.select { |w| w if w.start_with?(str) }
  end

  hint = 'Enter: (LINE,LINE) '

  unless candidate.empty?
    Readline::HISTORY << candidate
    STDOUT << "\nUse: \"#{slug(candidate).yellow}\"?\n".bold
    hint = 'Enter: (Y/N | LINE,LINE) '
  end

  input = Readline.readline(hint, true).chomp
  return candidate if input.empty? || input.casecmp('Y') == 0
  return '' if input.casecmp('N') == 0 # explict reject

  if input =~ /^\d+$/
    lines[input.to_i]
  elsif input =~ /^\d+(,\d+)+$/
    input.split(',').map(&:to_i).map do |i|
      lines[i]
    end.join(' ')
  else
    input
  end
end

stty_save = `stty -g`.chomp
# Trap Ctrl+C
trap('INT') do
  system('stty', stty_save)
  exit 0
end

if ARGV.length != 1
  STDERR << "Usage: #{$PROGRAM_NAME} filename.pdf\n"
  exit 1
end

r = begin
  PDF::Reader.new(ARGV[0])
rescue StandardError => e
  STDERR << "Error: Invalid Pdf, #{e}".red
  exit 1
end

if r.page_count < 1
  STDERR << "Error: No page found\n".red
  exit 3
end

lines = begin
  r.pages[0].text
            .split("\n")
            .map { |line| line.strip.gsub(/\s+/, ' ') }
            .select { |line| !line.empty? }
rescue StandardError => e
  STDERR << "Error: Text not found, #{e}".red
  exit 1
end

if lines.empty?
  STDERR << "Error: Empty first page\n".red
  exit 3
end

# Make a simple guess by looking at the pdf metadata or first 10 lines in content:
#
# - Use info[:Title] if exists and not ending with extension pdf
# - Use the first sentence with >= 3 words, and start with a capitalized char
# - Otherwise, let the user to choose from line, or enter a new name
#
lines = lines.take(10)

# PDF Title from metadata `mdls -name kMDItemTitle abc.pdf`
pdf_title = (r.info[:Title] || '').downcase

# Candidate Title line idx from pdf content
# candidate_idx could be nil if there is no line matched
candidate_idx = lines.find_index do |line|
  words = line.split(' ')
  next false if words.length < 3

  word = words[0].gsub(/[^a-zA-Z]/, '')
  next false if word.empty? # nums (e.g. year)

  word[0] == word[0].upcase
end

candidate = if !pdf_title.empty? && !pdf_title.end_with?('pdf')
              pdf_title
            elsif candidate_idx
              line = lines[candidate_idx]
              next_line = lines[candidate_idx + 1]
              # Merge the next line if the line end with connect words
              if next_line && conj?(line, next_line)
                line + ' ' + next_line
              else
                line
              end
            end || ''

lines.each_with_index do |line, idx|
  if candidate.include?(line) && (idx == candidate_idx || idx - 1 == candidate_idx)
    STDOUT << "[#{idx}] #{line.bold}\n".blue
  else
    STDOUT << "[#{idx}] #{line}\n"
  end
end

candidate = agree_or_alternative(candidate, lines)
if candidate.empty?
  STDERR << "Error: No title found\n".red
  exit 4
end

path, = File.split(ARGV[0])
new_file = File.join(path, "#{slug(candidate)}.pdf")

if File.exist?(new_file)
  STDERR << 'Error: File already exists'.red
  exit 1
else
  File.rename(ARGV[0], new_file)
  STDOUT << "Renamed: #{ARGV[0].blue} -> #{new_file.green}\n"
end
