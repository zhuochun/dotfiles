#!/usr/bin/env ruby
# encoding: utf-8

require_relative '../scripts/git-utils'

# Check who are the reviewers
#
#   git-review --since "2018-05-01" directory
#

if ARGV.length < 1
  STDERR << "Usage: #{$PROGRAM_NAME} [git-log-options] directory\n"
  exit 1
end

opt = ARGV[0...-1].join(' ') # --since "2018-05-01"
dir = ARGV[-1]

commits = `git log #{opt} #{dir}`

COMMIT_SPLIT_REGEX = /commit \w+\n+Author: .+?\n+Date: .+?\n+/

reviewed_by = commits.split(COMMIT_SPLIT_REGEX).map do |commit_msg|
  next [] if commit_msg.empty?

  commit = parse_phab_commit(commit_msg)
  commit[:reviewed_by].reject { |n| n.start_with?('#') }
end

# count by review by group
STDOUT << "= {Reviewed By} Pair Counts\n"

count = Hash.new(0)
reviewed_by.each { |line| count[line.sort.join(',')] += 1 }

inverted = Hash.new { |h, k| h[k] = [] }
count.each { |key, val| inverted[val] << key }

inverted.keys.sort.reverse_each do |c|
  inverted[c].each do |r|
    STDOUT << "#{c.to_s.ljust(5)}: #{r}\n"
  end
end

STDOUT << "\n\n"

# count by individual reviewers
STDOUT << "= {Reviewed By} Individual Counts\n"

count2 = Hash.new(0)
reviewed_by.each do |line|
  line.each { |n| n !~ /^O\d+/ && count2[n] += 1 }
end

inverted2 = Hash.new { |h, k| h[k] = [] }
count2.each { |key, val| inverted2[val] << key }

inverted2.keys.sort.reverse_each do |c|
  inverted2[c].each do |r|
    STDOUT << "#{c.to_s.ljust(5)}: #{r}\n"
  end
end
