#!/usr/bin/env ruby
# encoding: utf-8
# frozen_string_literal: true

require 'date'
require 'json'
require 'http'

# OhMyJIRA slack reminder on JIRA Issues
#
# Sample config:
#
#     {
#       "api": "https://jira.com/rest/api/2",
#       "web": "https://jira.com",
#       "channel": "#slack-channel",
#       "slack_hook": "https://hooks.slack.com/...",
#       "auth": "Basic xxx",
#       "project": "PROJ",
#       "jql": "..."
#     }
#

# Load config
def load_config(path)
  JSON.parse(File.read(path))
end

# Slack
def slack(cfg, channel, msg)
  payload = {
    channel: channel,
    username: 'OhMyJIRA',
    icon_emoji: [':jira:', ':ticket:', ':accept:'].sample,
    text: msg
  }

  HTTP.post(cfg['slack_hook'], json: payload)
end

def time_ago(t)
  elapsed = Time.now - t

  case
  when elapsed >= 172_800 # 2 days
    '%d days' % [elapsed / 86_400]
  when elapsed >= 86_400 # 1 day
    '%d day' % [elapsed / 86_400]
  when elapsed >= 7200 # 2 hours
    '%d hrs' % [elapsed / 3600]
  when elapsed >= 3600
    '%d hr' % [elapsed / 3600]
  when elapsed >= 120 # 2 mins
    '%d mins' % [elapsed / 60]
  else
    '%d min' % [elapsed / 60]
  end
end

# Search Issues
# https://docs.atlassian.com/software/jira/docs/api/REST/8.0.2/#api/2/search-searchUsingSearchRequest
def search_issues(cfg)
  url = "#{cfg['api']}/search"

  body = {
    jql: cfg['jql'],
    fields: [
      'reporter',
      'assignee',
      'issuetype',
      'status',
      'components',
      'updated',
      'summary',
      'description',
      'priority',
    ]
  }

  resp = HTTP.auth(cfg['auth']).post(url, json: body)
  return [] if resp.code != 200

  Array(resp.parse['issues'])
end

abort "Usage: #{$PROGRAM_NAME} config.json" if ARGV.length != 1

CONFIG_PATH = ARGV[0]
cfg = load_config(CONFIG_PATH)

issues = search_issues(cfg)

issues.each do |issue|
  link = "#{cfg['web']}/browse/#{issue['key']}"
  fields = issue['fields']

  msg = "*#{issue['key']}* <#{link}|#{fields['summary']}>\n  "

  assignee = fields['assignee']
  msg += "Taken care by _#{assignee['name']}_ " if assignee
  msg += "*#{fields['status']['name']}* "
  msg += "(#{time_ago(Time.parse(fields['updated']))}) "

  slack(cfg, cfg['channel'], msg)
end
