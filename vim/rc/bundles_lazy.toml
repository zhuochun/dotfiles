[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'BufEnter'
hook_source = '''
    " no need to update in realtime
    let g:gitgutter_realtime = 0
    " update when switch buffer/tab, or focus on gui
    let g:gitgutter_eager = 1
    " disable sign column highlight
    let g:gitgutter_override_sign_column_highlight = 0
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = ['Linediff', 'LinediffReset']

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = ['SplitjoinJoin', 'SplitjoinSplit']
on_map = ['gS', 'gJ']

[[plugins]]
repo = 'AndrewRadev/writable_search.vim'
depends = ['ack.vim']
on_cmd = ['WritableSearch']
hook_add = '''
    nnoremap ,f :WritableSearch<Space>
'''
hook_source = '''
    " set to use ack by default
    let g:writable_search_backends = ["ack.vim", "git-grep", "egrep"]
    " display more context around the match
    let g:writable_search_context_lines = 5
    " use statement as syntax
    let g:writable_search_highlight = 'Statement'
'''

[[plugins]]
repo = 'blindFS/vim-regionsyntax'
on_ft = ['markdown']

[[plugins]]
repo = 'bkad/CamelCaseMotion'
on_map = ['<Plug>CamelCaseMotion']
hook_add = '''
    map W <Plug>CamelCaseMotion_w
    map B <Plug>CamelCaseMotion_b
    map E <Plug>CamelCaseMotion_e
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
on_if = '!has("gui_running")'
hook_source = '''
    let g:tmux_navigator_disable_when_zoomed = 1
'''

[[plugins]]
repo = 'sjl/vitality.vim'
on_if = '!has("gui_running")'

[[plugins]]
repo = 'deris/vim-rengbang'
on_cmd = ['RengBang', 'RengBangUsePrev', 'RengBangConfirm']
on_map = ['<Plug>(operator-rengbang']
hook_source = '''
    " regex pattern for insertint sequencial numbering
    let g:rengbang_default_pattern = '\(\d\+\)'
    " start number for sequencial numbering.
    let g:rengbang_default_start = 1
    " use first number for sequencial numbering
    let g:rengbang_default_usefirst = 1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = ['<Plug>(easymotion-']
hook_add = '''
    " alias to normal editor commands
    map <C-f> <Plug>(easymotion-sn)
    map <D-f> <Plug>(easymotion-sn)
    " single char easymotion
    nmap s    <Plug>(easymotion-s)
    vmap s    <Plug>(easymotion-s)
    " multiple chars easymotion
    nmap S    <Plug>(easymotion-s2)
    vmap S    <Plug>(easymotion-s2)
    " visual mode to hit exact target in line
    vmap f    <Plug>(easymotion-fl)
    vmap F    <Plug>(easymotion-Fl)
    vmap t    <Plug>(easymotion-tl)
    vmap T    <Plug>(easymotion-Tl)
    " linewise easymotion
    nmap ,k   <Plug>(easymotion-sol-k)
    vmap ,k   <Plug>(easymotion-sol-k)
    nmap ,j   <Plug>(easymotion-sol-j)
    vmap ,j   <Plug>(easymotion-sol-j)
'''
hook_source = '''
    " disable default mappings
    let g:EasyMotion_do_mapping = 0
    " not case censitive
    let g:EasyMotion_smartcase = 1
    " jump to first match when type <Enter>
    let g:EasyMotion_enter_jump_first = 1
    " disable verbose messages
    let g:EasyMotion_verbose = 0
'''

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_source = '''
    let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
on_cmd = ['<Plug>(go-']
hook_source = '''
    " Enable goimports to insert import paths instead of gofmt
    let g:go_fmt_command = 'goimports'
    " Disable fmt command errors
    let g:go_fmt_fail_silently = 1
    " Run GoMetaLinter on save
    let g:go_metalinter_autosave = 0
    let g:go_metalinter_autosave_enabled = ['vet', 'errcheck', 'golint', 'ineffassign']
    " Disable auto jump to first error
    let g:go_jump_to_error = 1
    " Reuse buffer when GoDef
    let g:go_def_reuse_buffer = 1
    " No auto template when create new file
    let g:go_template_autocreate = 0
    " Use camelcase for tags, :GoAddTags
    let g:go_addtags_transform = "camelcase"
    " Fold imports and package comments
    let g:go_fold_enable = ['import', 'package_comment']
    " No highlights white space after []
    let g:go_highlight_array_whitespace_error = 0
    " No highlights white space around <-
    let g:go_highlight_chan_whitespace_error = 0
    " No highlights commonly used library types
    let g:go_highlight_extra_types = 0
    " No highlights instances of tabs following spaces
    let g:go_highlight_space_tab_error = 0
    " No highlights trailing white space
    let g:go_highlight_trailing_whitespace_error = 0
    " Highlight go:generate directives
    let g:go_highlight_generate_tags = 1
'''

[[plugins]]
repo = 'FooSoft/vim-argwrap'
on_cmd = ['ArgWrap']
hook_source = '''
    " closing brace is preceded with a comma when wrapping lines
    let g:argwrap_tail_comma = 1
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = ['<Plug>(asterisk-']
hook_add = '''
    map *  <Plug>(asterisk-z*)
    map #  <Plug>(asterisk-z#)
    map g* <Plug>(asterisk-gz*)
    map g# <Plug>(asterisk-gz#)
'''
hook_source = '''
    " keep cursor position when next/prev
    let g:asterisk#keeppos = 1
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = ['<Plug>(incsearch-']
hook_add = '''
    map /  <Plug>(incsearch-forward)
    map ?  <Plug>(incsearch-backward)
'''
hook_source = '''
    " enable very magic option
    let g:incsearch#magic = '\v'
    " enables Emacs-like keymappings (readline)
    let g:incsearch#emacs_like_keymap = 1
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
depends = ['incsearch.vim']
on_map = ['<Plug>(incsearch-fuzzy-']
hook_add = '''
    map z/ <Plug>(incsearch-fuzzy-/)
    map z? <Plug>(incsearch-fuzzy-?)
'''

[[plugins]]
repo = 'IngoHeimbach/semantic-highlight.vim'
on_cmd = ['SemanticHighlight']
on_ft = ['ruby', 'python', 'coffee', 'elixir', 'go']
hook_source = '''
    " A optimally distinct colors http://tools.medialab.sciences-po.fr/iwanthue/
    let g:semanticGUIColors = ['#A7C575', '#BDBDE4', '#E0ED85', '#E9C5E3', '#CAF19B', '#E9A9BB',
                              \'#9BDE9D', '#F4A091', '#89EEE4', '#E1A46A', '#97DBE2', '#E2B964',
                              \'#C4DBEC', '#D7CC71', '#B2C4CC', '#F1A87F', '#8EE9CA', '#E7C183',
                              \'#7CC9BC', '#E9B7A2', '#87DCB0', '#CEB7B5', '#CDF8C9', '#CAB996',
                              \'#97C19A', '#F5E2A8', '#B3D2BF', '#C6C989', '#E6E3CC', '#C2DDAA',
                              \'#B4BC9F', '#E6E5B2']
    " Cache color values across files
    let g:semanticUseCache = 1
    " Cache color values across sessions
    let g:semanticPersistCache = 1
    " Activate automatically for certain filetypes
    let g:semanticEnableFileTypes = {
                \   'javascript' : 'js',
                \   'coffee'     : 'coffee',
                \   'ruby'       : 'ruby',
                \   'elixir'     : 'elixir',
                \   'go'         : 'go',
                \ }
    " Add backlists item in Golang
    let g:semanticBlacklistOverride = {
                \ 'go': [
                \   'break',    'default',     'func',   'interface', 'select',
                \   'case',     'defer',       'go',     'map',       'struct',
                \   'chan',     'else',        'goto',   'package',   'switch',
                \   'const',    'fallthrough', 'if',     'range',     'type',
                \   'continue', 'for',         'import', 'return',    'var',
                \ ]}
'''

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
on_cmd = ['TestLast', 'TestNearest', 'TestFile', 'TestSuite']
hook_source = '''
    let g:test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    xmap <CR> <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
    nmap ,a   <Plug>(EasyAlign)
'''
hook_source = '''
    let g:easy_align_delimiters = {
          \ '>': { 'pattern': '>>\|=>\|>' },
          \ '\': { 'pattern': '\\' },
          \ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
          \ }
'''

[[plugins]]
repo = 'junegunn/gv.vim'
on_cmd = ['GV', 'GV!', 'GV?']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html']
hook_source = '''
    " enable emmet functions in insert mode only
    let g:user_emmet_mode = 'i'

    " <D-y> to expand input in insert mode
    let g:user_emmet_expandabbr_key = '<D-y>'
    "  <D-Y> to goto next point
    let g:user_emmet_next_key = '<D-Y>'
    " <M-y> to goto prev point
    let g:user_emmet_prev_key = '<M-y>'

    " complete tags using omnifunc
    let g:use_emmet_complete_tag = 1
'''

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = ['TagbarToggle']
hook_add = '''
    nnoremap <silent> <F10> :TagbarToggle<CR>
'''
hook_source = '''
    " sort according to order in file
    let g:tagbar_sort = 0
    " default is 40
    let g:tagbar_width = 42
    " omit vacant lines
    let g:tagbar_compact = 1
    " auto focus on Tagbar when opened
    let g:tagbar_autofocus = 1
    " default iconchars are too wide (Mac)
    let g:tagbar_iconchars = ['▸', '▾']
    " expand tag folds
    let g:tagbar_autoshowtag = 1
    " tagbar types coffeescript
    let g:tagbar_type_coffee = {
          \ 'ctagstype' : 'coffee',
          \ 'kinds' : [
          \   'c:classes',
          \   'm:methods',
          \   'f:functions',
          \   'v:variables',
          \   'f:fields',
          \ ]}
    " tagbar types markdown
    let g:tagbar_type_markdown = {
          \ 'ctagstype' : 'markdown',
          \ 'kinds' : [
          \   'h:Heading_L1',
          \   'i:Heading_L2',
          \   'j:Heading_L3',
          \   'k:Heading_L4'
          \ ]}
'''

[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = ['Sayonara']
hook_add = '''
    " Close buffer and leave Window intact
    nnoremap ,d :Sayonara!<CR>
    " Close buffer
    nnoremap ,D :Sayonara<CR>
'''

[[plugins]]
repo = 'mileszs/ack.vim'
on_cmd = ['Ack']

[[plugins]]
repo = 'sbdchd/neoformat'
on_cmd = ['Neoformat', 'Neoformat!']
hook_add = '''
    nnoremap <silent> <F8> :Neoformat<CR>
    nnoremap <silent> ,gf  :Neoformat<CR>
'''

[[plugins]]
repo = 'schickling/vim-bufonly'
on_cmd = ['BufOnly']
hook_add = '''
    nnoremap <silent> ,B :BufOnly<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
on_event = 'VimEnter'
on_cmd = ['NERDTreeToggle', 'NERDTreeCWD', 'NERDTreeFind']
hook_add = 'source ~/dotfiles/vim/rc/bundles/nerdtree.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
    let g:echodoc#type = 'virtual'

    call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = ['Unite', 'UniteWithCursorWord']
hook_source = 'source ~/dotfiles/vim/rc/bundles/unite.vim'
# Press <C-l> to refresh cached files when new files not appearing
# Press <C-r> to restart Unite and fix Unite glitches
hook_add = '''
    " Unite resume the last unite buffer
    nnoremap <silent> go. :<C-u>UniteResume<CR>
    " Unite grep in current directory
    nnoremap <silent> go/ :<C-u>Unite -buffer-name=grep grep:. -auto-preview -no-split -no-empty<CR>
    vnoremap <silent> go/ :<C-u>UniteWithCursorWord -buffer-name=grep grep:. -auto-preview -no-split -no-empty<CR>
    nnoremap <silent> go? :<C-u>UniteResume grep<CR>
    " Unite menus
    nnoremap <silent> goM :<C-u>Unite -buffer-name=menus menu -start-insert<CR>
    nnoremap <silent> goG :<C-u>Unite -buffer-name=menus menu:git -start-insert<CR>
    " Unite plugins
    nnoremap <silent> gob :<C-u>Unite -buffer-name=buffers buffer -start-insert<CR>
    nnoremap <silent> gor :<C-u>Unite -buffer-name=register register<CR>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> gof :<C-u>Unite -buffer-name=MRU_file neomru/file -start-insert<CR>
    nnoremap <silent> god :<C-u>Unite -buffer-name=MRU_dirs neomru/directory -start-insert -default-action=lcd<CR>
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> goo :<C-u>Unite -buffer-name=outline outline -start-insert<CR>
'''

[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> goi :<C-u>Unite -buffer-name=junkfile junkfile/new junkfile -start-insert<CR>
'''
hook_source = '''
    let g:junkfile#directory = expand('~/Documents/Notes')
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_source = ['unite.vim']
on_map = ['<Plug>(yankround-']
hook_add = '''
    " yankround mappings
    nmap p  <Plug>(yankround-p)
    nmap P  <Plug>(yankround-P)

    " loop yanks, <leader>y, <leader>Y
    nmap ,P <Plug>(yankround-prev)
    nmap ,p <Plug>(yankround-next)

    " yanks in commandline
    cmap <C-r> <Plug>(yankround-insert-register)
    cmap <C-y> <Plug>(yankround-pop)

    " unite.vim
    nnoremap <silent> goy :<C-u>Unite -buffer-name=yanks yankround<CR>
'''

[[plugins]]
repo = 'moznion/unite-git-conflict.vim'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> gog :<C-u>Unite -buffer-name=search git-conflict -start-insert<CR>
'''

[[plugins]]
repo = 'osyo-manga/unite-quickfix'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> gol :<C-u>Unite -buffer-name=quickfix location_list<CR>
    nnoremap <silent> goq :<C-u>Unite -buffer-name=quickfix quickfix<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_source = ['unite.vim']
on_map = ['<Plug>(anzu-']
hook_add = '''
    nmap n n<Plug>(anzu-update-search-status-with-echo)
    nmap N N<Plug>(anzu-update-search-status-with-echo)

    nnoremap <silent> go* :<C-u>Unite -buffer-name=search anzu<CR>
'''

[[plugins]]
repo = 'ujihisa/unite-colorscheme'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> goc :<C-u>Unite -buffer-name=colorscheme colorscheme -auto-preview<CR>
'''

[[plugins]]
repo = 'ujihisa/unite-font'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> goC :<C-u>Unite -buffer-name=colorscheme font -auto-preview<CR>
'''

[[plugins]]
repo = 'tsukkee/unite-tag'
on_source = ['unite.vim']
hook_add = '''
    nnoremap <silent> got :<C-u>Unite -buffer-name=tags tag/include -start-insert<CR>
    vnoremap <silent> got :<C-u>UniteWithCursorWord -buffer-name=tags tag/include -start-insert<CR>
'''

[[plugins]]
repo = 'rhysd/unite-go-import.vim'
on_source = ['unite.vim']
on_ft = ['go']
hook_add = '''
    nnoremap <buffer> <silent> ,oI :<C-u>Unite go/import -start-insert<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
if = 'has("nvim")'
on_event = 'InsertEnter'
hook_source = '''
    source ~/dotfiles/vim/rc/bundles/deoplete.vim

    call deoplete#enable()
'''

[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
depends = ['deoplete.nvim']
on_ft = 'go'
hook_source = '''
    " Faster lookup on gocode binary
    let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
    " Class Sorting and Ignore
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
    " Complete external packages (slower)
    let g:deoplete#sources#go#source_importer = 1
    " Complete unimported standard library packages
    let g:deoplete#sources#go#unimported_packages = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['vim-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = 'source ~/dotfiles/vim/rc/bundles/neosnippet.vim'

[[plugins]]
repo = 'rhysd/conflict-marker.vim'
on_map = ['[x', ']x', '<Plug>(conflict-marker']

[[plugins]]
repo = 'tommcdo/vim-exchange'
on_map = ['cx', 'cxx', 'X', '<Plug>(Exchange']

[[plugins]]
repo = 'tpope/vim-abolish'
on_cmd = ['Abolish']
on_map = ['crm', 'crc', 'crs', 'cru']

[[plugins]]
repo = 'tpope/vim-commentary'
on_map = ['gc', 'gcc', 'gcu']

[[plugins]]
repo = 'tpope/vim-dispatch'
on_cmd = ['Dispatch']

[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertCharPre'

[[plugins]]
repo = 'tpope/vim-projectionist'

[[plugins]]
repo = 'tpope/vim-unimpaired'
on_map = ['[', ']']

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = ['OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch']
on_map = ['<Plug>(openbrowser-']
hook_add = '''
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''
hook_source = '''
    let g:netrw_nogx = 1
'''

[[plugins]]
repo = 'kannokanno/previm'
depends = ['open-browser.vim']
on_cmd = ['PrevimOpen']

[[plugins]]
repo = 'vim-airline/vim-airline'
on_event = 'VimEnter'
hook_source = 'source ~/dotfiles/vim/rc/bundles/airline.vim'

[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby']
hook_source = '''
    " disable the 'end' keyword colorized
    let g:ruby_no_expensive = 1

    " load/evaluate code in order to provide completions. This may cause some code execution,
    " which may be a concern. This is not enabled by default
    let g:rubycomplete_buffer_loading = 0
    " parse the entire buffer to add a list of classes to the completion results.
    " This feature is turned off by default.
    let g:rubycomplete_classes_in_global = 0
    " detect and load Rails environment for files within a rails project. The feature is disabled by default.
    let g:rubycomplete_rails = 0
    " use Bundler.require instead of parsing the Gemfile
    let g:rubycomplete_use_bundler = 0
'''

[[plugins]]
repo = 'tpope/vim-rails'
depends = ['vim-projectionist']
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'w0rp/ale'
on_event = 'InsertEnter'
hook_add = '''
    nnoremap <silent> <F7> :ALELint<CR>
'''
hook_source = '''
    " Populated any warnings and errors in quickfix list
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    " Disable lint history
    let g:ale_history_enabled = 0
    let g:ale_history_log_output = 0
    " Disable lint on enter new buffer/modified buffer
    let g:ale_lint_on_enter = 0
    " Increase lint delay on text changed
    let g:ale_lint_delay = 900

    " Use GoMetaLinter in ALE
    let g:ale_linters = {'go': ['gometalinter']}
    " Config GoMetaLinter to run specific linters
    let g:ale_go_gometalinter_options =
        \ '--disable-all ' .
        \ '--enable=golint --enable=vet --enable=vetshadow ' .
        \ '--enable=errcheck --enable=ineffassign ' .
        \ '--deadline=5s'
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = 'BufEnter'
hook_source = '''
    let g:indentLine_faster = 1
    let g:indentLine_char = '┊'
    let g:indentLine_fileTypeExclude = ['markdown', 'text', 'go']
'''
